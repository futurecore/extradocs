@InProceedings{Mount09,
  title =        "{CSP} as a {D}omain-{S}pecific {L}anguage {E}mbedded in {P}ython and {J}ython",
  author=        "Mount,  Sarah and Hammoudeh,  Mohammad and Wilson,  Sam and Newman,  Robert",
  editor=        "Welch, Peter H. and Roebbers,  Herman and Broenink,  Jan F. and Barnes,  Frederick R. M. and Ritson,  Carl G. and Sampson,  Adam T. and Stiles,  G. S. and Vinter,  Brian",
  pages =        "293--309",
  booktitle=     "{C}ommunicating {P}rocess {A}rchitectures 2009",
  isbn=          "978-1-60750-065-0",
  year=          "2009",
  month=         "nov",
  abstract=      "Recently, much discussion has taken place within the Python programming community on how best to support concurrent programming. This paper describes a new Python library, python-csp, which implements synchronous, message-passing concurrency based on Hoare's Communicating Sequential Processes. Although other CSP libraries have been written for Python, python-csp has a number of novel features. The library is implemented both as an object hierarchy and as a domain-specific language, meaning that programmers can compose processes and guards using infix operators, similar to the original CSP syntax. The language design is intended to be idiomatic Python and is therefore quite different to other CSP libraries. python-csp targets the CPython interpreter and has variants which reify CSP process as Python threads and operating system processes. An
equivalent library targets the Jython interpreter, where CSP processes are reified as Java threads. jython-csp also has Java wrappers which allow the library to be used from pure Java programs. We describe these aspects of python-csp, together with performance benchmarks and
a formal analysis of channel synchronisation and choice, using the model checker SPIN."
}
